Key Concepts
Unified Inheritance Hierarchy:

All types derive from the base type System.Object (C# keyword: object).
Types can inherit members (methods, properties, etc.) from a base type, supporting hierarchical design.
Two Fundamental Type Categories:

Value Types: Directly hold data. Examples: int, double, struct.
Created using struct or built-in numeric types.
Copied when assigned to a new variable.
Reference Types: Store references to data in memory. Examples: class, record class.
Created using class or record.
Shared reference when assigned to a new variable.
Class, Struct, and Record Types:

Class: Reference type used for complex behavior and mutable data.
Struct: Value type for lightweight, immutable data structures.
Record: Can be reference (record class) or value type (record struct); designed for data-centric types with value-based equality.
Behavior of Types:

Classes: Changes in one variable affect others referring to the same instance.
Structs: Changes in one copy do not affect others since each holds its own data.
Records: Automatically support value equality.